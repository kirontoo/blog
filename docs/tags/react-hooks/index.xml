<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react-hooks on Kironto</title><link>https://blog.rxkiro.xyz/tags/react-hooks/</link><description>Recent content in react-hooks on Kironto</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 29 Dec 2022 11:19:43 -0800</lastBuildDate><atom:link href="https://blog.rxkiro.xyz/tags/react-hooks/index.xml" rel="self" type="application/rss+xml"/><item><title>React Lifecycle: useEffect Hook</title><link>https://blog.rxkiro.xyz/posts/react-lifecycle-useeffect-hook/</link><pubDate>Thu, 29 Dec 2022 11:19:43 -0800</pubDate><guid>https://blog.rxkiro.xyz/posts/react-lifecycle-useeffect-hook/</guid><description>Allows us to think about when things should happen in relation to state changes.
function MyComponent() { React.useEffect(() = &amp;gt;{ // Runs whenever state changes return function cleanup() { // This will cleanup function run at the end of the life of the component // Mostly used to clean up things like timeout or subscriptions } }, [when, any, ofThese, variables, change]); React.useEffect(() = &amp;gt;{ // Re-runs every single time the component is re-rendered // and runs at first render }); React.</description><content>&lt;p>Allows us to think about when things should happen in relation to state changes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">MyComponent&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">useEffect&lt;/span>(() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Runs whenever state changes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">cleanup&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// This will cleanup function run at the end of the life of the component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Mostly used to clean up things like timeout or subscriptions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, [&lt;span style="color:#a6e22e">when&lt;/span>, &lt;span style="color:#a6e22e">any&lt;/span>, &lt;span style="color:#a6e22e">ofThese&lt;/span>, &lt;span style="color:#a6e22e">variables&lt;/span>, &lt;span style="color:#a6e22e">change&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">useEffect&lt;/span>(() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Re-runs every single time the component is re-rendered
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and runs at first render
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">useEffect&lt;/span>(() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// runs only once after the component has mounted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }, []);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ( &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">div&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">hello&lt;/span> &lt;span style="color:#a6e22e">world&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/div&amp;gt; );&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>ðŸ”¥ Tip:
You can use multiple effects to separate concerns.
&lt;/code>&lt;/pre>&lt;h2 id="gotchas">Gotchas&lt;/h2>
&lt;p>When you pass in a state into &lt;code>useEffect&lt;/code> as a second argument, make sure that
you actually include all values from the component scope that change over time
and are used by the effect.&lt;/p>
&lt;p>If you &lt;strong>DO NOT&lt;/strong>, React could render &lt;code>stale values&lt;/code> from previous renders.&lt;/p>
&lt;pre tabindex="0">&lt;code>React relies on the order in which Hooks are called. In other words, each React
Hook gets called based on the order that they are declared on every render.
&lt;/code>&lt;/pre></content></item></channel></rss>