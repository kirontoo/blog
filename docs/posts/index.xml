<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Kironto</title><link>https://blog.rxkiro.xyz/posts/</link><description>Recent content in Posts on Kironto</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 29 Dec 2022 11:19:43 -0800</lastBuildDate><atom:link href="https://blog.rxkiro.xyz/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>React Lifecycle: useEffect Hook</title><link>https://blog.rxkiro.xyz/posts/react-lifecycle-useeffect-hook/</link><pubDate>Thu, 29 Dec 2022 11:19:43 -0800</pubDate><guid>https://blog.rxkiro.xyz/posts/react-lifecycle-useeffect-hook/</guid><description>Allows us to think about when things should happen in relation to state changes.
function MyComponent() { React.useEffect(() = &amp;gt;{ // Runs whenever state changes return function cleanup() { // This will cleanup function run at the end of the life of the component // Mostly used to clean up things like timeout or subscriptions } }, [when, any, ofThese, variables, change]); React.useEffect(() = &amp;gt;{ // Re-runs every single time the component is re-rendered // and runs at first render }); React.</description><content>&lt;p>Allows us to think about when things should happen in relation to state changes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">MyComponent&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">useEffect&lt;/span>(() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Runs whenever state changes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">cleanup&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// This will cleanup function run at the end of the life of the component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Mostly used to clean up things like timeout or subscriptions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, [&lt;span style="color:#a6e22e">when&lt;/span>, &lt;span style="color:#a6e22e">any&lt;/span>, &lt;span style="color:#a6e22e">ofThese&lt;/span>, &lt;span style="color:#a6e22e">variables&lt;/span>, &lt;span style="color:#a6e22e">change&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">useEffect&lt;/span>(() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Re-runs every single time the component is re-rendered
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and runs at first render
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">useEffect&lt;/span>(() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// runs only once after the component has mounted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }, []);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ( &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">div&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">hello&lt;/span> &lt;span style="color:#a6e22e">world&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/div&amp;gt; );&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>ðŸ”¥ Tip:
You can use multiple effects to separate concerns.
&lt;/code>&lt;/pre>&lt;h2 id="gotchas">Gotchas&lt;/h2>
&lt;p>When you pass in a state into &lt;code>useEffect&lt;/code> as a second argument, make sure that
you actually include all values from the component scope that change over time
and are used by the effect.&lt;/p>
&lt;p>If you &lt;strong>DO NOT&lt;/strong>, React could render &lt;code>stale values&lt;/code> from previous renders.&lt;/p>
&lt;pre tabindex="0">&lt;code>React relies on the order in which Hooks are called. In other words, each React
Hook gets called based on the order that they are declared on every render.
&lt;/code>&lt;/pre></content></item><item><title>Behold... Comments</title><link>https://blog.rxkiro.xyz/posts/behold-comments/</link><pubDate>Wed, 21 Dec 2022 20:04:15 -0800</pubDate><guid>https://blog.rxkiro.xyz/posts/behold-comments/</guid><description>Look! I finally added comments!
There were many options that I could&amp;rsquo;ve gone with for this blog but in the end I decided to go with cactus comments. From reading the docs, cactus seemed REALLY easy to set up with Hugo, and it was! The docs were quite straight forward and everything worked as intended. Styling the comments to blend in with the theme took forever, but it was quite fun.</description><content>&lt;p>Look! I finally added comments!&lt;/p>
&lt;p>There were many options that I could&amp;rsquo;ve gone with for this blog but in the end
I decided to go with &lt;a href="https://cactus.chat">cactus comments&lt;/a>.
From reading the docs, cactus seemed REALLY easy to set up with Hugo, and it was!
The docs were quite straight forward and everything worked as intended.
Styling the comments to blend in with the theme took forever, but it was quite fun.&lt;/p></content></item><item><title>Setting Up Persistent Authentication With Firebase 9, React and Redux</title><link>https://blog.rxkiro.xyz/posts/setting-up-persistent-authentication-with-firebase-9-react-and-redux/</link><pubDate>Mon, 19 Dec 2022 20:46:55 -0800</pubDate><guid>https://blog.rxkiro.xyz/posts/setting-up-persistent-authentication-with-firebase-9-react-and-redux/</guid><description>While working on one of my projects, I had a bit of trouble trying to add persistent authentication with Firebase and so this is my solution. I don&amp;rsquo;t want this guide to be too long, so I will not be covering how to implement Firebase sign-in and sign-out.
Hope it helps someone! :)
Dependencies Make sure to already have a React project and a Firebase project created. As well as to install npm packages for both firebase and react-redux.</description><content>&lt;p>While working on one of my projects, I had a bit of trouble trying to add persistent
authentication with Firebase and so this is my solution. I don&amp;rsquo;t want this guide
to be too long, so I will not be covering how to implement Firebase sign-in and
sign-out.&lt;/p>
&lt;p>Hope it helps someone! :)&lt;/p>
&lt;h2 id="dependencies">Dependencies&lt;/h2>
&lt;p>Make sure to already have a React project and a Firebase project created. As
well as to install npm packages for both &lt;code>firebase&lt;/code> and &lt;code>react-redux&lt;/code>.&lt;/p>
&lt;p>You can install them with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install @reduxjs/toolkit react-redux firebase
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setting-up-firebase">Setting up Firebase&lt;/h2>
&lt;p>Before everything, make sure to set up your firebase config. I am using typescript,
so this file will be called &lt;code>firebase.ts&lt;/code>. In my project, I will be placing this
file in a &lt;code>utils&lt;/code> folder.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// file: utils/firebase.ts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">firebaseConfig&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> COPY PASTE YOUR CONFIG HERE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">apiKey&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">authDomain&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">projectId&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">storageBucket&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">messagingSenderId&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">appId&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">firebaseApp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">initializeApp&lt;/span>(&lt;span style="color:#a6e22e">firebaseConfig&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">auth&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getAuth&lt;/span>(&lt;span style="color:#a6e22e">firebaseApp&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> { &lt;span style="color:#a6e22e">auth&lt;/span>, &lt;span style="color:#a6e22e">firebaseApp&lt;/span> };
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="add-a-provider-in-firebase">Add a provider in firebase&lt;/h3>
&lt;p>If you haven&amp;rsquo;t already, we will need to add a provider in Firebase in order
to enable sign-in using email and password.&lt;/p>
&lt;p>In the Firebase console, go to your
&lt;code>Authentication&lt;/code> dashboard and then click on the &lt;code>Sign-in method&lt;/code> tab. From here,
we should be able to see a &lt;code>Add new provider&lt;/code> button.
Click on this button and then under &lt;code>Native Providers&lt;/code>, enable &lt;code>email/password&lt;/code>.&lt;/p>
&lt;h2 id="setting-up-redux">Setting up Redux&lt;/h2>
&lt;p>If you have already set up Redux in your project, feel free to skip this section!
According to the official Redux docs, we should create slices within a folder
called &lt;code>features&lt;/code>. I prefer to have all my Redux related files organized within
a single a folder. So we&amp;rsquo;ll be adding all of our Redux related files within a
folder called &lt;code>store&lt;/code>.&lt;/p>
&lt;h3 id="what-our-folder-structure-will-look-like">What our folder structure will look like&lt;/h3>
&lt;p>This will be how our Redux folder structure will look like.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> src/store
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”œâ”€â”€ features
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”‚ â””â”€â”€ user
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”‚ â””â”€â”€ userSlice.ts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”œâ”€â”€ index.ts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â””â”€â”€ reducers.ts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="create-our-store">Create our store&lt;/h3>
&lt;p>In our &lt;code>store&lt;/code> folder create a file called &lt;code>index.ts&lt;/code>. This is where we will
be setting up our Redux store. We name the file &lt;code>index.ts&lt;/code> so that when we export
our Redux store, we can easily import it to our app with
&lt;code>import store from './store';&lt;/code>&lt;/p>
&lt;p>Place this code in &lt;code>store/index.ts&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// file: src/store/index.ts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">configureStore&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;@reduxjs/toolkit&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">configureStore&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reducer&lt;/span>&lt;span style="color:#f92672">:&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> ({}),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we will need to make sure we provide the store to our entire app.
Within our React project and in the file where you mount your root app
(this should be in &lt;code>src/index.ts&lt;/code>), import &lt;code>Provider&lt;/code> from &lt;code>react-redux&lt;/code> and
our Redux store. Then wrap your App component with the component &lt;code>&amp;lt;Provider&amp;gt;&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// file: src/index.ts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">ReactDOM&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react-dom&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Provider&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react-redux&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./App&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./store&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ReactDOM&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">React.StrictMode&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">Provider&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">store&lt;/span>}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">App&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">Provider&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">React.StrictMode&lt;/span>&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you need more information on how all of this code works, you can check out
Redux&amp;rsquo;s official docs on &lt;a href="https://redux.js.org/introduction/getting-started">getting started with Redux&lt;/a>.&lt;/p>
&lt;h3 id="creating-our-user-slice">Creating our user slice&lt;/h3>
&lt;p>The user slice will be responsible for all of our state logic and actions for
users. You can find more information on slices in the
&lt;a href="https://redux.js.org/tutorials/essentials/part-2-app-structure#redux-slices">official Redux docs&lt;/a>.
In our user slice, a user is logged out when the state is null and logged in
when there is User data.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// file: ./store/features/user/userSlice
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">createSlice&lt;/span>, &lt;span style="color:#a6e22e">PayloadAction&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;@reduxjs/toolkit&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">User&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;firebase/auth&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">UserState&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span>: &lt;span style="color:#66d9ef">User&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">initialState&lt;/span>: &lt;span style="color:#66d9ef">UserState&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">userSlice&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createSlice&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">initialState&lt;/span>: &lt;span style="color:#66d9ef">initialState&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reducers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logout() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...&lt;span style="color:#a6e22e">initialState&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">login&lt;/span>(&lt;span style="color:#a6e22e">state&lt;/span>: &lt;span style="color:#66d9ef">UserState&lt;/span>, &lt;span style="color:#a6e22e">action&lt;/span>: &lt;span style="color:#66d9ef">PayloadAction&lt;/span>&amp;lt;&lt;span style="color:#f92672">User&lt;/span>&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span>: &lt;span style="color:#66d9ef">action.payload&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// selectors
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">selectUser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">state&lt;/span>: &lt;span style="color:#66d9ef">UserState&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">user&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// actions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> { &lt;span style="color:#a6e22e">startLoading&lt;/span>, &lt;span style="color:#a6e22e">stopLoading&lt;/span>, &lt;span style="color:#a6e22e">login&lt;/span>, &lt;span style="color:#a6e22e">logout&lt;/span> } &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">userSlice&lt;/span>.&lt;span style="color:#a6e22e">actions&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">userSlice&lt;/span>.&lt;span style="color:#a6e22e">reducer&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the reducers file in place, we can now add our user reducer to our list of
reducers.
I like to create a separate file for this so that the &lt;code>store/index.ts&lt;/code> file is
a bit cleaner. So we will create a new file called &lt;code>reducers.ts&lt;/code> in the &lt;code>store&lt;/code>
folder to hold all of our reducers. And to combine our reducers, we will use a
built-in Redux method called &lt;code>combineReducers&lt;/code>.&lt;/p>
&lt;p>Here&amp;rsquo;s what this code will look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// file: ./store/reducers.ts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">combineReducers&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;redux&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">userReducer&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./features/user/userSlice&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">rootReducer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">combineReducers&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span>: &lt;span style="color:#66d9ef">userReducer&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// OTHER REDUCERS HERE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">rootReducer&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You also need to make sure the store knows about these
reducers. So we will also update &lt;code>./store/index.ts&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// file: ./store/index.ts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">configureStore&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;@reduxjs/toolkit&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">rootReducer&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./reducers&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">configureStore&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// NEW CODE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">reducer&lt;/span>: &lt;span style="color:#66d9ef">rootReducer&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// NEW CODE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="loading-persistent-user-data-on-mount">Loading persistent user data on mount&lt;/h2>
&lt;p>Ok! We&amp;rsquo;ve finally gotten redux and firebase up and running. Now to make user
login persistent.&lt;/p>
&lt;p>In order to watch for changes in our Firebase authentication state, we will
need to use the method &lt;code>onAuthStateChange&lt;/code>. It is a &lt;code>observer&lt;/code> that watches for
changes in our Firebase authentication state. And since it&amp;rsquo;s an observer, we
will also need to make sure we clean it up by unsubscribing to the observer
when the component unmounts.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">useEffect&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">useDispatch&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react-redux&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">login&lt;/span>, &lt;span style="color:#a6e22e">logout&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./store/features/user/userSlice&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">App() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">dispatch&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">useDispatch&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">useEffect&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">unsubscribe&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">onAuthStateChanged&lt;/span>(&lt;span style="color:#a6e22e">auth&lt;/span>, (&lt;span style="color:#a6e22e">userAuth&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">userAuth&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dispatch&lt;/span>(&lt;span style="color:#a6e22e">login&lt;/span>(&lt;span style="color:#a6e22e">userAuth&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dispatch&lt;/span>(&lt;span style="color:#a6e22e">logout&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">unsubscribe&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dispatch&lt;/span>(&lt;span style="color:#a6e22e">logout&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, []);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// component logic here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="accessing-user-data-within-a-react-component">Accessing user data within a React component&lt;/h3>
&lt;p>In order to access our user&amp;rsquo;s data and login status, we need to import
&lt;code>selectUser&lt;/code> which we&amp;rsquo;ve already implemented in our &lt;code>userSlice.ts&lt;/code> file.
Combined with &lt;code>useSelector&lt;/code>, we will be able to grab the data from within our
Redux store.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">selectUser&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./store/features/user/userSlice&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">useSelector&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react-redux&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#a6e22e">User&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;firebase/auth&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">myComponent() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>: &lt;span style="color:#66d9ef">User&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">useSelector&lt;/span>(&lt;span style="color:#a6e22e">selectUser&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// component logic here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Annnnd we are done. Let me know if there are any mistakes :D&lt;/p></content></item><item><title>Audio Splitting in Linux</title><link>https://blog.rxkiro.xyz/posts/audio-splitting-in-linux/</link><pubDate>Tue, 24 May 2022 12:50:35 -0700</pubDate><guid>https://blog.rxkiro.xyz/posts/audio-splitting-in-linux/</guid><description>Pre-Requisites You&amp;rsquo;ll need to have both pulseaudio and pavucontrol installed on your system
Install For Ubuntu sudo apt-get pulseaudio pavucontrol Install For Arch pacman -S pulseaudio pavucontrol # OR yay -S pulseaudio pavucontrol Setting up a new audio sink Make a new directory called .pulse in your home directory, this is the default pulseaudio config folder. Note that depending on your OS, the default pulseaudio directory could be in a different path or different folder name.</description><content>&lt;h2 id="pre-requisites">Pre-Requisites&lt;/h2>
&lt;p>You&amp;rsquo;ll need to have both &lt;code>pulseaudio&lt;/code> and &lt;code>pavucontrol&lt;/code> installed on your system&lt;/p>
&lt;h3 id="install-for-ubuntu">Install For Ubuntu&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get pulseaudio pavucontrol
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="install-for-arch">Install For Arch&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pacman -S pulseaudio pavucontrol
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yay -S pulseaudio pavucontrol
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setting-up-a-new-audio-sink">Setting up a new audio sink&lt;/h2>
&lt;p>Make a new directory called &lt;code>.pulse&lt;/code> in your home directory, this is the default &lt;code>pulseaudio&lt;/code> config folder.
&lt;strong>Note&lt;/strong> that depending on your OS, the default &lt;code>pulseaudio&lt;/code> directory could be in a different path or different folder name. Check your &lt;code>man&lt;/code> pages with &lt;code>man pulseaudio&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> mkdir ~/.pulse
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Copy the default &lt;code>pulseaudio&lt;/code> config, &lt;code>default.pa&lt;/code>, into the new folder.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cp /etc/pulse/default.pa ~/.pulse/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Make sure the new file is in your directory&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ls -la ~/.pulse
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, you need to find all of your current audio sinks:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pacmd list-sinks | grep -e &lt;span style="color:#e6db74">&amp;#39;index:&amp;#39;&lt;/span> -e &lt;span style="color:#e6db74">&amp;#39;name:&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will show all of your audio output devices. Your output should look something like this:&lt;/p>
&lt;pre tabindex="0">&lt;code> index: 0
name: &amp;lt;alsa_output.pci-0000_01_00.1.hdmi-stereo&amp;gt;
* index: 1
name: &amp;lt;alsa_output.usb-Razer_Razer_Kraken_7.1_V2_00000000-00.analog-stereo&amp;gt;
index: 2
name: &amp;lt;alsa_output.pci-0000_00_1f.3.analog-stereo&amp;gt;
&lt;/code>&lt;/pre>&lt;p>The &lt;code>*&lt;/code> symbol shows your currently active audio output.&lt;/p>
&lt;p>Copy the audio output you want to direct audio towards. For me, I want to be able to send all audio source I&amp;rsquo;m monitoring to my headset.
So I would copy &lt;code>alsa_output.usb-Razer_Razer_Kraken_7.1_V2_00000000-00.analog-stereo&lt;/code>.
Paste this in a empty text document. You&amp;rsquo;ll need this info later.&lt;/p>
&lt;p>Next, you&amp;rsquo;ll want to make a dummy audio sink. To do this, open up
&lt;code>~/.pulse/default.pa&lt;/code> in a text editor. Go all the way to the bottom of the document and use this template to define your new audio sink.&lt;/p>
&lt;p>Here is a template that you can use:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>load-module module-null-sink sink_name=channelname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>update-sink-proplist channelname device.description=&amp;#34;channelname Audio&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>update-source-proplist channelname.monitor device.description=&amp;#39;Monitor of channelname Audio&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>load-module module-loopback source=channelname.monitor sink=outputdevicename latency_msec=1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Replace &lt;code>channelname&lt;/code> with your audio sink name, then replace &lt;code>outputdevicename&lt;/code> with the audio output device we copied earlier.&lt;/p>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>I used this to better control which audio source I want to be streamed on twitch through OBS but still be able to monitor and hear everything.
Here&amp;rsquo;s what my &lt;code>default.pa&lt;/code> looks like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>load-module module-null-sink sink_name=twitchaudio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>update-sink-proplist twitchaudio device.description=&amp;#39;Twitch Streaming Audio&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>update-source-proplist twitchaudio.monitor device.description=&amp;#39;Monitor of Twitch Audio&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>load-module module-loopback source=twitchaudio.monitor sink=alsa_output.usb-Razer_Razer_Kraken_7.1_V2_00000000-00.analog-stereo latency_msec=1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="restart-pulseaudio-and-all-of-your-apps">Restart Pulseaudio And All Of Your Apps&lt;/h2>
&lt;p>After you&amp;rsquo;re done making custom audio sinks, make sure to restart &lt;code>pulseaudio&lt;/code> using this command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pulseaudio --kill
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should automatically restart &lt;code>pulseaudio&lt;/code>, but if it doesn&amp;rsquo;t, you can manually start it with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pulseaudio --start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After restarting &lt;code>pulseaudio&lt;/code>, you&amp;rsquo;ll find that there&amp;rsquo;s no audio. You&amp;rsquo;ll need to restart all your apps that streams audio to your speakers.&lt;/p>
&lt;h2 id="pulseaudio-volume-control-app-pavucontrol">Pulseaudio Volume Control App (pavucontrol)&lt;/h2>
&lt;p>From here launch &lt;code>pavucontrol&lt;/code> and you&amp;rsquo;ll be able to see your new audio sink in the &lt;code>recording, playback, and output devices&lt;/code> tabs. `
This app will let you control where you want all of your audio sources to be directed to.&lt;/p>
&lt;h2 id="misc">Misc&lt;/h2>
&lt;p>For more info, check out the arch wiki page: &lt;a href="https://wiki.archlinux.org/title/PulseAudio/Examples#Remapping_sinks">wiki.archlinux.org&lt;/a>&lt;/p></content></item><item><title>Git: Removing Untracked Files</title><link>https://blog.rxkiro.xyz/posts/remove-untracked-files/</link><pubDate>Mon, 21 Mar 2022 10:23:29 -0700</pubDate><guid>https://blog.rxkiro.xyz/posts/remove-untracked-files/</guid><description>git clean -fdx -f - force
-d - include directories
-x - include ignored files
!Use with Caution!
This command will delete files that you haven&amp;rsquo;t thought of. Be careful whenever running a command with -f</description><content>&lt;pre tabindex="0">&lt;code>git clean -fdx
&lt;/code>&lt;/pre>&lt;p>-f - force&lt;/p>
&lt;p>-d - include directories&lt;/p>
&lt;p>-x - include ignored files&lt;/p>
&lt;hr>
&lt;p>&lt;strong>!Use with Caution!&lt;/strong>&lt;/p>
&lt;p>This command will delete files that you haven&amp;rsquo;t thought of. Be careful whenever
running a command with &lt;code>-f&lt;/code>&lt;/p></content></item><item><title>Useful Vim Tricks</title><link>https://blog.rxkiro.xyz/posts/vim-tricks/</link><pubDate>Sat, 21 Nov 2020 19:33:51 -0800</pubDate><guid>https://blog.rxkiro.xyz/posts/vim-tricks/</guid><description>Append Output Of A External Command To Your Buffer The :read command can insert a file or the output of an external program into the current buffer. To run a program just prefix the shell command with !.
Example:
:read !echo &amp;#34;hello&amp;#34; You can also specify the line you want to output to. Just prefix read with a number and it will output to that line. Example:
:12read !echo &amp;#34;hello&amp;#34; To output to a certain number of lines before your current line, prefix with - number of lines.</description><content>&lt;h2 id="append-output-of-a-external-command-to-your-buffer">Append Output Of A External Command To Your Buffer&lt;/h2>
&lt;p>The &lt;code>:read&lt;/code> command can insert a file or the output of an external program into the current buffer.
To run a program just prefix the shell command with &lt;code>!&lt;/code>.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#a6e22e">read&lt;/span> !&lt;span style="color:#a6e22e">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also specify the line you want to output to. Just prefix &lt;code>read&lt;/code> with a number and it will output to that line.
Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#ae81ff">12&lt;/span>read !&lt;span style="color:#a6e22e">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To output to a certain number of lines before your current line, prefix with &lt;code>-&lt;/code> number of lines.
&lt;code>-&lt;/code> for before.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#ae81ff">-12&lt;/span>read !&lt;span style="color:#a6e22e">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-a-new-file-in-the-same-directory-as-the-current-buffer">Create A New File In The Same Directory As The Current Buffer&lt;/h2>
&lt;p>&lt;code>%:h&lt;/code> will autocomplete the folder path for you. Press &amp;lsquo;&lt;TAB>&amp;rsquo; to autofill the
full path&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#a6e22e">e&lt;/span> %:&lt;span style="color:#a6e22e">h&lt;/span>/&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="custom-settings-for-different-filetypes--languages-ftplugin">Custom Settings For Different Filetypes / Languages: ftplugin&lt;/h2>
&lt;p>By using the &lt;code>ftplugin&lt;/code> directory, you can apply different settings or keymaps
for different languages and filetypes.&lt;/p>
&lt;p>For example: In the &lt;code>$HOME/.config/nvim/ftplugin/javascript.vim&lt;/code> file
&lt;code>nnoremap ,get :read $VIMPATH/snippets/js/get.js&amp;lt;CR&amp;gt;&lt;/code>&lt;/p>
&lt;p>when you run this keymap, it will pipe the contents of the &lt;code>.js&lt;/code> file into
your current buffer&lt;/p>
&lt;h2 id="sorting">Sorting&lt;/h2>
&lt;p>Highlight the lines you want to sort, then run the command: &lt;code>:sort&lt;/code>&lt;/p>
&lt;p>&lt;strong>Example&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// before
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">banana&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;banana&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">durian&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;durian&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cantalope&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;cantalope&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">apple&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;apple&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// after
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">apple&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;apple&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">banana&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;banana&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cantalope&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;cantalope&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">durian&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;durian&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="columns">Columns&lt;/h2>
&lt;p>Highlight (using shift+v) the lines you want, then run the command &lt;code>:!column --table&lt;/code>.
This will organize the spacing for you.&lt;/p>
&lt;p>&lt;strong>Example&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// before
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">apple&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;apple&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">banana&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;banana&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cantalope&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;cantalope&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">durian&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;durian&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// after
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">apple&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;apple&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">banana&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;banana&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cantalope&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;cantalope&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">durian&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;durian&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="multiple-commands-in-one">Multiple Commands In One&lt;/h2>
&lt;p>You can execute multiple commands in one command by separating them with &lt;code>|&lt;/code>.
Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>:%&lt;span style="color:#a6e22e">s&lt;/span>&lt;span style="color:#e6db74">/hello/&lt;/span>&lt;span style="color:#a6e22e">world&lt;/span> | %&lt;span style="color:#a6e22e">s&lt;/span>&lt;span style="color:#e6db74">/foo/&lt;/span>&lt;span style="color:#a6e22e">bar&lt;/span> | %&lt;span style="color:#a6e22e">s&lt;/span>&lt;span style="color:#e6db74">/hello/&lt;/span>&lt;span style="color:#a6e22e">goodbye&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-case-generating-a-file">Use Case: Generating A File&lt;/h3>
&lt;p>Sometimes you just need to quickly create a file with some boilerplate in it,
to do this you can make vim open and read file, then pipe it into your current buffer.&lt;/p>
&lt;p>You can create a snippets folder that holds all of your snippets or boilerplate.
Using these files, I can generate the files I want by combining commands in VIM.&lt;/p>
&lt;p>Example: I have a snippet file called &lt;code>test.js.&lt;/code> In this file, I have some boilerplate for a
test file for a nodejs project. In any given project, I can generate a new test file in the same directory as
my current buffer is in using:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#a6e22e">e&lt;/span> %:&lt;span style="color:#a6e22e">h&lt;/span>&lt;span style="color:#e6db74">/mytest.test.js | read /&lt;/span>&lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#e6db74">/to/&lt;/span>&lt;span style="color:#a6e22e">snippet&lt;/span>/&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">js&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="windows">Windows&lt;/h2>
&lt;h3 id="hiding-windows">Hiding Windows&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">noremap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">leader&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">hh&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">C&lt;/span>-&lt;span style="color:#a6e22e">w&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">h&lt;/span>:&lt;span style="color:#a6e22e">hide&lt;/span>&amp;lt;&lt;span style="color:#a6e22e">CR&lt;/span>&amp;gt; &lt;span style="color:#75715e">&amp;#34; hide the left window&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">noremap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">leader&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">hj&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">C&lt;/span>-&lt;span style="color:#a6e22e">w&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">j&lt;/span>:&lt;span style="color:#a6e22e">hide&lt;/span>&amp;lt;&lt;span style="color:#a6e22e">CR&lt;/span>&amp;gt; &lt;span style="color:#75715e">&amp;#34; hide the bottom window&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">noremap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">leader&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">hk&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">C&lt;/span>-&lt;span style="color:#a6e22e">w&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">k&lt;/span>:&lt;span style="color:#a6e22e">hide&lt;/span>&amp;lt;&lt;span style="color:#a6e22e">CR&lt;/span>&amp;gt; &lt;span style="color:#75715e">&amp;#34; hide the top window&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">noremap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">leader&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">hl&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">C&lt;/span>-&lt;span style="color:#a6e22e">w&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">l&lt;/span>:&lt;span style="color:#a6e22e">hide&lt;/span>&amp;lt;&lt;span style="color:#a6e22e">CR&lt;/span>&amp;gt; &lt;span style="color:#75715e">&amp;#34; hide the right window&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>